{"ast":null,"code":"var _jsxFileName = \"/home/gabon/Documents/Udemy React/Resources/Working with React Router/12-adv-starting-project/frontend/src/pages/EventDetailPage.js\";\nimport { useParams, json, useLoaderData, useRou } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EventDetailPage() {\n  // const params = useParams(); //gives us access to the values that are encoded in the URL, eventid in this case\n\n  // const data = useLoaderData()\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: \"could not fetch details for selected event\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","json","useLoaderData","useRou","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","children","event","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventId","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/home/gabon/Documents/Udemy React/Resources/Working with React Router/12-adv-starting-project/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import { useParams, json, useLoaderData, useRou } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nexport default function EventDetailPage() {\n  // const params = useParams(); //gives us access to the values that are encoded in the URL, eventid in this case\n\n  // const data = useLoaderData()\n\n\n  return(\n  <>\n    {/* <h1>EventDetailPage</h1>\n    <p>EVENT ID: {params.eventId}</p> */}\n\n\n\n        <EventItem event={data.event}/>\n\n  </>)\n}\n\nexport async function loader({request, params}) {\n\n  const id = params.eventId\n  \n  const response = await fetch('http://localhost:8080/events/'+id)\n  if(!response.ok) {\n    throw json({message: \"could not fetch details for selected event\"}, {\n      status: 500\n    })\n  }\n  else{return response}\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,aAAa,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAChD,eAAe,SAASC,eAAeA,CAAA,EAAG;EACxC;;EAEA;;EAGA,oBACAH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eAMMJ,OAAA,CAACF,SAAS;MAACO,KAAK,EAAEC,IAAI,CAACD;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBAEnC,CAAC;AACL;AAACC,EAAA,GAhBuBR,eAAe;AAkBvC,OAAO,eAAeS,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAE9C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAACH,EAAE,CAAC;EAChE,IAAG,CAACE,QAAQ,CAACE,EAAE,EAAE;IACf,MAAMxB,IAAI,CAAC;MAACyB,OAAO,EAAE;IAA4C,CAAC,EAAE;MAClEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MACG;IAAC,OAAOJ,QAAQ;EAAA;AACtB;AAAC,IAAAN,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}