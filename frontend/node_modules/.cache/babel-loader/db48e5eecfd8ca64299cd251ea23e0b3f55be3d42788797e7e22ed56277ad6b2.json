{"ast":null,"code":"var _jsxFileName = \"/home/gabon/Documents/Udemy React/Resources/Working with React Router/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\n//useLoaderData to get access to the \"closest\"\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  // error handling\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw {message: \"Could not fetch events.\"}\n    // throw new Response(JSON.stringify({ message: \"could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    return json({\n      message: \"could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // const resData = await response.json();\n    // const res = new Response('data',{status: 201})\n    return response;\n  }\n}\nexport function loader() {\n  defer({});\n}\n\n// export async function loader() {\n//   // cannot use react hooks in the loader\n//   const response = await fetch(\"http://localhost:8080/events\");\n//   // error handling\n//   if (!response.ok) {\n//     // return { isError: true, message: \"Could not fetch events.\" };\n//     // throw {message: \"Could not fetch events.\"}\n//     // throw new Response(JSON.stringify({ message: \"could not fetch events.\" }), {\n//     //   status: 500,\n//     // });\n//     return json({ message: \"could not fetch events.\" }, { status: 500 });\n//   } else {\n//     // const resData = await response.json();\n//     // const res = new Response('data',{status: 201})\n//     return response;\n//   }\n// }\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loadEvents","response","fetch","ok","status","loader","$RefreshReg$"],"sources":["/home/gabon/Documents/Udemy React/Resources/Working with React Router/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData, json, defer } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\n\n//useLoaderData to get access to the \"closest\"\nfunction EventsPage() {\n  const data = useLoaderData();\n  if (data.isError) {\n    return <p>{data.message}</p>;\n  }\n  const events = data.events;\n  return <>{<EventsList events={events} />}</>;\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  // error handling\n  if (!response.ok) {\n    // return { isError: true, message: \"Could not fetch events.\" };\n    // throw {message: \"Could not fetch events.\"}\n    // throw new Response(JSON.stringify({ message: \"could not fetch events.\" }), {\n    //   status: 500,\n    // });\n    return json({ message: \"could not fetch events.\" }, { status: 500 });\n  } else {\n    // const resData = await response.json();\n    // const res = new Response('data',{status: 201})\n    return response;\n  }\n}\n\n\nexport function loader() {\n  defer({\n\n\n    \n  })\n}\n\n// export async function loader() {\n//   // cannot use react hooks in the loader\n//   const response = await fetch(\"http://localhost:8080/events\");\n//   // error handling\n//   if (!response.ok) {\n//     // return { isError: true, message: \"Could not fetch events.\" };\n//     // throw {message: \"Could not fetch events.\"}\n//     // throw new Response(JSON.stringify({ message: \"could not fetch events.\" }), {\n//     //   status: 500,\n//     // });\n//     return json({ message: \"could not fetch events.\" }, { status: 500 });\n//   } else {\n//     // const resData = await response.json();\n//     // const res = new Response('data',{status: 201})\n//     return response;\n//   }\n// }\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAC5B,IAAIU,IAAI,CAACC,OAAO,EAAE;IAChB,oBAAON,OAAA;MAAAO,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAC9B;EACA,MAAMC,MAAM,GAAGR,IAAI,CAACQ,MAAM;EAC1B,oBAAOb,OAAA,CAAAE,SAAA;IAAAK,QAAA,eAAGP,OAAA,CAACF,UAAU;MAACe,MAAM,EAAEA;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAAG,CAAC;AAC9C;AAACR,EAAA,CAPQD,UAAU;EAAA,QACJR,aAAa;AAAA;AAAAmB,EAAA,GADnBX,UAAU;AASnB,eAAeA,UAAU;AAEzB,eAAeY,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D;EACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACA,OAAOtB,IAAI,CAAC;MAAEY,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEW,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL;IACA;IACA,OAAOH,QAAQ;EACjB;AACF;AAGA,OAAO,SAASI,MAAMA,CAAA,EAAG;EACvBvB,KAAK,CAAC,CAIN,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAiB,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}